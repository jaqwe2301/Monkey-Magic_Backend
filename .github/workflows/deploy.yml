name: Deploy Node.js Backend

on:
  push:
    branches:
      - main # main 브랜치에 푸시될 때 실행

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout Code
        uses: actions/checkout@v3

      # 2. env 파일 생성
      - name: Create .env file
        run: |
          echo POSTGRES_HOST=${{ secrets.POSTGRES_HOST }} >> .env
          echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
          echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
          echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env
          echo SOLAPI_KEY=${{ secrets.SOLAPI_KEY }} >> .env
          echo SOLAPI_SECRET_KEY=${{ secrets.SOLAPI_SECRET_KEY }} >> .env

      # 3. Node.js 설치 및 종속성 설치
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "22.x"

      - name: Install dependencies
        run: npm install
        
      # 4. Docker 이미지 빌드
      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_IMAGE_NAME }} .

      # 5. Docker Hub 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 6. Docker 이미지 푸시
      - name: Push Docker Image to Docker Hub
        run: |
          docker tag ${{ secrets.DOCKER_IMAGE_NAME }} ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:latest

      # 7. SSH를 통해 EC2에서 docker-compose 실행
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            cd /home/ubuntu

            docker stop backend_app1 backend_app2 || true
            docker rm backend_app1 backend_app2 || true
            docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}

            docker run -d \
            --name backend_app1 \
            -p 8001:8001 \
            -e POSTGRES_HOST=${{ secrets.POSTGRES_HOST }} \
            -e POSTGRES_USER=${{ secrets.POSTGRES_USER }} \
            -e POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
            -e POSTGRES_DB=${{ secrets.POSTGRES_DB }} \
            -e SOLAPI_KEY=${{ secrets.SOLAPI_KEY }} \
            -e SOLAPI_SECRET_KEY=${{ secrets.SOLAPI_SECRET_KEY }} \
            ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}
    
            docker run -d \
              --name backend_app2 \
              -p 8002:8002 \
              -e POSTGRES_HOST=${{ secrets.POSTGRES_HOST }} \
              -e POSTGRES_USER=${{ secrets.POSTGRES_USER }} \
              -e POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
              -e POSTGRES_DB=${{ secrets.POSTGRES_DB }} \
              -e SOLAPI_KEY=${{ secrets.SOLAPI_KEY }} \
              -e SOLAPI_SECRET_KEY=${{ secrets.SOLAPI_SECRET_KEY }} \
              ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}

              docker system prune -af
              docker volume prune -f
              docker network prune -f

              docker-compose down
              docker-compose pull
              docker-compose up -d --build
