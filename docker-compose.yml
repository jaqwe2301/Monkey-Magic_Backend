version: "3.8"

services:
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6380:6379"
    networks:
      - app-network
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis_data:/data

  backend_app1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: backend_app1
    restart: always
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      REDIS_HOST: monkey-redis
      REDIS_PORT: 6380
      PORT: 8001
    ports:
      - "8001:8001"
    depends_on:
      - redis
    networks:
      - app-network

  backend_app2:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: backend_app2
    restart: always
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      REDIS_HOST: monkey-redis
      REDIS_PORT: 6380
      PORT: 8002
    ports:
      - "8002:8002"
    depends_on:
      - redis
    networks:
      - app-network

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - /home/ubuntu/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend_app1
      - backend_app2
    networks:
      - app-network

volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge